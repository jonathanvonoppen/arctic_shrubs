---
title: 'Nuuk Fjord: Drivers of shrub abundance - development of beta-binomial mixture
  model'
author: "Jonathan von Oppen"
date: "13/05/2020"
output:
  html_notebook:
    code_folding: hide
    df_print: paged
    toc: false
    toc_float:
      collapsed: false
---

## Single-species models

This dataset is a new one containing predictors extracted from downscaled CHELSA climate data.

Analyses conducted on fusion table at **plot $\times$ taxon level** (as we are explicitly interested in plot-level variation of predictors, esp. slope, solar radiation, topographical wetness, and competition): 3726 observations for **ADD FINAL NUMBER** variables

```{r}
env_cov_bio <- read.csv("../../data/nuuk_env_cover_plots.csv", header = T)
```
<button class="btn btn-primary" data-toggle="collapse" data-target="#BlockName"> Show/Hide Data Summary </button>
<div id="BlockName" class="collapse">
```{r}
skim(env_cov_bio)
```

### Prepare data for JAGS model 
### a) selection of variables relevant for analysis
including predictors

* Information on site, plot, plot group, sampling location (lat, lon, altitude), sampling year 
* downscaled CHELSA predictors, averaged over a 30-year period (*[...]_ts_30*) 
* solar radiation index (SRI, following [Keating et al. 2007](http://www.bioone.org/doi/abs/10.2193/2006-359), yet to come), slope (erosion measure) & moisture availability (-> Jakob, yet to come)
* taxon (see above for levels)
* competition pressure in the community (as summed abundance of taller-growing shrub species within a plot, averaged within plot groups)

and response variable 

* cover (as relative no. hits per plot, averaged within plot groups)
```{r}
env_cov_bio_sub <- env_cov_bio %>% 
  select(site_alt_plotgroup_id, plot, site, site_alt_id, year, long, lat,  # plot info / metadata
  ends_with("_ts_30"),   # CHELSA predictors averaged over 10-year period prior to study year
  inclin_down, twi_90m, sri, 
  #mean_summ_ndvi_yos, cv_mean_summ_ndvi_2001_to_yos, Perc_dist_coast_lines,   # environmental data
  taxon, cover, compet)   # taxon, cover response, competition pressure
head(env_cov_bio_sub)
```

Predictors don't always vary between plots within plotgroups - perhaps due to several falling into the same CHELSA grid cell.

Example: plots within site 1, altitude 20, plot group 1: plot P146 is slightly off and therefore has different climate variables than the other ones

```{r}
env_cov_bio %>% filter(taxon == "Betula nana" & site_alt_plotgroup_id == "1_20_1") %>% 
  ggplot(aes(x = long, y = lat)) + 
  geom_point() + 
  geom_text(aes(label = plot), hjust = 0.0001) + 
  xlim(c(-51.78675, -51.7863))
env_cov_bio %>% filter(taxon == "Betula nana" & site_alt_plotgroup_id == "1_20_1") %>% 
  select(site_alt_plotgroup_id, plot, tempjja_ts_30)
```

### b) adjustion of data structure

Data was ordered by site/altitude/plotgroup and taxon
```{r}
env_cov_bio_sub <- env_cov_bio_sub[order(env_cov_bio_sub$site_alt_plotgroup_id, env_cov_bio_sub$taxon),]

```

As JAGS is only able to handle numeric input, all variables are assigned a numeric identifier:
```{r}
env_cov_bio_sub$plotgroup.NUM <- as.numeric(factor(env_cov_bio_sub$site_alt_plotgroup_id,
                                                   levels = unique(env_cov_bio_sub$site_alt_plotgroup_id)))
env_cov_bio_sub$plot.NUM <- as.numeric(factor(env_cov_bio_sub$plot,
                                              levels = unique(env_cov_bio_sub$plot)))
env_cov_bio_sub$site.NUM <- as.numeric(factor(env_cov_bio_sub$site, levels = unique(env_cov_bio_sub$site)))
env_cov_bio_sub$taxon.NUM <- as.numeric(factor(env_cov_bio_sub$taxon, levels = unique(env_cov_bio_sub$taxon)))
```

Taxa were coded as follows: 
```{r}
data.frame(taxon = levels(env_cov_bio_sub$taxon),
           num = unique(env_cov_bio_sub$taxon.NUM))
```

Numeric predictors were scaled: 
```{r}
num_pred <- env_cov_bio_sub %>% select(ends_with("_ts_30"), 
                                       inclin_down,
                                       sri, 
                                       starts_with("twi"), 
                                       matches("compet"))
for(i in 1:length(num_pred)){
  col <- colnames(num_pred[i])
  env_cov_bio_sub[paste0(col,"C")] <- as.numeric(scale(num_pred[i], scale = TRUE, center = TRUE))
}
```

To account for the range of the cover response ($0 \leq cover \leq 1$), the model needs a mixed structure incorporating a beta distribution (for all continuous values with $0 < cover < 1$) and a binomial distribution (for all discrete values of $cover = \{0, 1\}$). An additional variable *cover_discrete* was introduced to separate the dataset into discrete (= 1) and continuous (= 0) cover values:
```{r}
env_cov_bio_sub$cover_discrete <- ifelse(env_cov_bio_sub$cover == 1 | env_cov_bio_sub$cover == 0, 1, 0)
```

The dataset was then ready to be split up into the species of interest. As a first trial, I focused on *Betula nana*:
```{r}
# complete Betula nana data
BetNan.tot <- filter(env_cov_bio_sub, taxon == "Betula nana")
# discrete cover values
BetNan.dis <- filter(BetNan.tot, cover_discrete == 1) # contains only zeros as responses
# continuous cover values
BetNan.cont <- filter(BetNan.tot, cover_discrete == 0)
```

### c) assembling data for model input in a list

JAGS needs data input in list format, so I provided all relevant variables as follows:
```{r}
# Compile data into list ####
shrub_gradient_jags.BetNan.data <- list(
  N_plotgroups = length(unique(BetNan.tot$site_alt_plotgroup_id)),
  
  # plot level predictors, for discrete...
  cov.dis = BetNan.dis$cover,
  plotgroup.dis = BetNan.dis$plotgroup.NUM, #AB added this
  inclin_down.dis = BetNan.dis$inclin_downC,
  sri.dis = BetNan.dis$sriC,
  twi_90m.dis = BetNan.dis$twi_90mC,
  compet.dis = BetNan.dis$competC,
  N_discrete = nrow(BetNan.dis),
  
  # ...and continuous part of the data
  cov.cont = BetNan.cont$cover,
  plotgroup.cont = BetNan.cont$plotgroup.NUM, #AB added this
  inclin_down.cont = BetNan.cont$inclin_downC,
  sri.cont = BetNan.cont$sriC,
  twi_90m.cont = BetNan.cont$twi_90mC,
  compet.cont = BetNan.cont$competC,
  N_cont = nrow(BetNan.cont),
  
  # plot group level predictors
  tempjja.tot = BetNan.tot$tempjja_ts_30C[!duplicated(BetNan.tot$plotgroup.NUM)], # one value per tXpg
  tempmax.tot = BetNan.tot$tempmax_ts_30C[!duplicated(BetNan.tot$plotgroup.NUM)],
  tempmin.tot = BetNan.tot$tempmin_ts_30C[!duplicated(BetNan.tot$plotgroup.NUM)],
  tempcont.tot = BetNan.tot$tempcont_ts_30C[!duplicated(BetNan.tot$plotgroup.NUM)],
  precipjja.tot = BetNan.tot$precipjja_ts_30C[!duplicated(BetNan.tot$plotgroup.NUM)],
  precipjfmam.tot = BetNan.tot$precipjfmam_ts_30C[!duplicated(BetNan.tot$plotgroup.NUM)]
)
str(shrub_gradient_jags.BetNan.data)
```

...and specified the model:
```{r}
write("
  
  model{
    
    # priors
      
      intercept ~ dnorm(0, 0.0001)
      
      b.compet ~ dnorm(0, 0.0001)
      b.sri ~ dnorm(0, 0.0001)
      b.inclin_down ~ dnorm(0, 0.0001)
      b.twi_90m ~ dnorm(0, 0.0001)

      sigma.plotgroup ~ dunif(0,100)
      tau.plotgroup <- 1/(sigma.plotgroup * sigma.plotgroup)
      
      b.tempjja.x ~ dnorm(0, 0.001)
      b.tempjja.x2 ~ dnorm(0, 0.001)
      b.tempmax.x ~ dnorm(0, 0.001)
      b.tempmax.x2 ~ dnorm(0, 0.001)
      b.tempmin.x ~ dnorm(0, 0.001)
      b.tempmin.x2 ~ dnorm(0, 0.001)
      b.tempcont.x ~ dnorm(0, 0.001)
      b.tempcont.x2 ~ dnorm(0, 0.001)
      b.precipjja.x ~ dnorm(0, 0.001)
      b.precipjja.x2 ~ dnorm(0, 0.001)
      b.precipjfmam.x ~ dnorm(0, 0.001)
      b.precipjfmam.x2 ~ dnorm(0, 0.001)
      
      phi ~ dgamma(0.1, 0.1)
      
      
    # LIKELIHOOD for discrete part

      for (i in 1:N_discrete){ 
        cov.dis[i] ~ dbern(mu[i])
        logit(mu[i]) <- b_plotgroup[plotgroup.dis[i]] + #AB added this, ~= random effect of plot group
                        b.compet * compet.dis[i] + 
                        b.inclin_down * inclin_down.dis[i] +
                        b.twi_90m * twi_90m.dis[i] + 
                        b.sri * sri.dis[i] 
      }
      
      
    # LIKELIHOOD for continuous part

      for (i in 1:N_cont){
        cov.cont[i] ~ dbeta(p[i], q[i])
        p[i] <- mu2[i] * phi
        q[i] <- (1 - mu2[i]) * phi
        logit(mu2[i]) <- b_plotgroup[plotgroup.cont[i]] + #AB added this, ~= random effect of plot group
                        b.compet * compet.cont[i] +
                        b.inclin_down * inclin_down.cont[i] +
                        b.twi_90m * twi_90m.cont[i] + 
                        b.sri * sri.cont[i] 
      }


      for (j in 1:N_plotgroups){ # length of total plotgroups
        b_plotgroup[j] ~ dnorm(mu.plotgroup[j],tau.plotgroup)
        mu.plotgroup[j] <- intercept + 
                    
                    # plot group level predictors, linear and quadratic term
                    b.tempjja.x * tempjja.tot[j] + 
                    b.tempjja.x2 * (tempjja.tot[j]^2) + 
                    b.tempmax.x * tempmax.tot[j] + 
                    b.tempmax.x2 * (tempmax.tot[j]^2) +
                    b.tempmin.x * tempmin.tot[j] + 
                    b.tempmin.x2 * (tempmin.tot[j]^2) +
                    b.tempcont.x * tempcont.tot[j] + 
                    b.tempcont.x2 * (tempcont.tot[j]^2) +
                    b.precipjja.x * precipjja.tot[j] + 
                    b.precipjja.x2 * (precipjja.tot[j]^2) +
                    b.precipjfmam.x * precipjfmam.tot[j] + 
                    b.precipjfmam.x2 * (precipjfmam.tot[j]^2)
      }

    
      }
  ","shrub_gradient.BetNan.jags")
```

After specifying the parameters to be monitored, the model was run:
```{r}
params <- c("intercept",
            "b.tempjja.x", "b.tempjja.x2",
            "b.tempmax.x", "b.tempmax.x2",
            "b.tempmin.x", "b.tempmin.x2",
            "b.tempcont.x", "b.tempcont.x2",
            "b.precipjja.x", "b.precipjja.x2",
            "b.precipjfmam.x", "b.precipjfmam.x2",
            "b.compet", 
            "b.inclin_down", 
            "b.sri",
            "b.twi_90m",
            "b_plotgroup[1]","b_plotgroup[2]","b_plotgroup[3]","b_plotgroup[63]","sigma.plotgroup","phi") 

# run model
model_out.shrub_gradient.BetNan <- jags(shrub_gradient_jags.BetNan.data, inits = NULL, params, 
                                 model.file = "shrub_gradient.BetNan.jags", n.chains = 3, 
                                 n.iter = 8000, n.burnin = 6000, n.thin=2, DIC=FALSE, 
                                 working.directory=NULL, progress.bar = "text") 

plot(model_out.shrub_gradient.BetNan) #check convergence, etc.
```

Notes at first glance:

* quadratic fit better for temperature variables, linear fit better for precipitation variables
* tbc

[repeat with other species]
[repeat with 0 filtered out]