
  
  model{
# priors 

  intercept ~ dnorm(0, 0.0001)
  
  b.interact ~ dnorm(0, 0.0001)
  
  b.tempjja.x ~ dnorm(0, 0.001)

  b.tempXinteract ~ dnorm(0, 0.001)

  sigma.plot ~ dunif(0,100)
  tau.plot <- 1/(sigma.plot * sigma.plot)
  
  sigma.plotgroup ~ dunif(0,100)
  tau.plotgroup <- 1/(sigma.plotgroup * sigma.plotgroup)
  
  phi ~ dgamma(0.1, 0.1)
  
  
  # plot level - discrete part
  for (i in 1:N_discrete){ 
    abund.dis[i] ~ dbern(mu[i])
    logit(mu[i]) <- b_plotgroup[plotgroup.dis[i]] + # ~= random effect of plot group
      b.interact * interact.dis[i] + 
      b.tempXinteract * tempjja.dis[i] * interact.dis[i]       # for interaction
  }
  
  
  # plot level - continuous part
  for (j in 1:N_cont){
    abund.cont[j] ~ dbeta(p[j], q[j])
    p[j] <- mu2[j] * phi
    q[j] <- (1 - mu2[j]) * phi
    logit(mu2[j]) <- b_plotgroup[plotgroup.cont[j]] + # ~= random effect of plot group
      b.interact * interact.cont[j] + 
      b.tempXinteract * tempjja.cont[j] * interact.cont[j]       # for interaction
  }
  
  
  # plotgroup level
  for (k in 1:N_plotgroups){ # length of total plotgroup
    b_plotgroup[k] ~ dnorm(mu.plotgroup[k],tau.plotgroup)
    mu.plotgroup[k] <- intercept + 
      
      # plot group level predictors, linear and quadratic term
      b.tempjja.x * tempjja.tot[k]
  }
  
  
  # derived parameters 
  for (m in 1:Nxhat){
    for (p in 1:Nxhat2){
      phat_tempXinteract[m,p] <- intercept +
          b.tempjja.x * xhat_tempjja[m] +
          b.interact * xhat_interact2[p] +
          b.tempXinteract * xhat_tempjja[m] * xhat_interact2[p]       # for interaction
    }
  }
  }

